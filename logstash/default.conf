input {
  udp {
    codec => "json"
    port => 5044
    type => "app"
  }
  gelf {
    port => 12201
    type => "infra"
  }
  beats {
    port => 5044
    type => "infra"
  }
}

filter {
  if "rabbit" in [tags] {
    grok {
      match => {
        message => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] (?:<(?:[0-9.]+)> (?<label>[^<]*) )?<(?:[0-9.]+)> %{GREEDYDATA:message}"
      }
      overwrite => ["message"]
      remove_field => [
        "beat",
        "prospector",
        "source",
        "tags"
      ]
      add_field => {
        "[meta][component]" => "rabbit"
      }
    }
  }
  if [fileset][module] == "nginx" and [fileset][name] == "access" {
    grok {
      match => {
        message => "%{IPORHOST:clientip} (?:-|(%{WORD}.%{WORD})) %{USER:ident} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:forwarder}"
      }
      remove_field => [
        "beat",
        "prospector",
        "source",
        "fileset",
        "tags"
      ]
      add_field => {
        level => "debug"
        "[meta][component]" => "nginx"
      }
    }
  }
  if [fileset][module] == "nginx" and [fileset][name] == "error" {
    grok {
      match => {
        message => "(?<timestamp>\d{4}[-/]\d\d[-/]\d\d \d\d:\d\d:\d\d) \[%{LOGLEVEL:level}\] %{GREEDYDATA:message}"
      }
      overwrite => ["level"]
      remove_field => [
        "beat",
        "prospector",
        "source",
        "fileset",
        "tags"
      ]
      add_field => {
        "[meta][component]" => "nginx"
      }
    }
  }
  if [command] == "/usr/local/bin/etcd" {
    grok {
      match => {
        message => "%{TIMESTAMP_ISO8601:timestamp} (?<level>[ATDNIWECFS]) \| (?<label>[^:]+): %{GREEDYDATA:message}"
      }
      overwrite => ["message", "level"]
      remove_field => [
        "command",
        "container_id",
        "tag",
        "image_id",
        "image_name",
        "created",
        "version"
      ]
      add_field => {
        "[meta][component]" => "etcd"
      }
    }
    translate {
      field => "level"
      destination => "level"
      override => true
      dictionary => {
        "A" => "alert"
        "T" => "trace"
        "D" => "debug"
        "N" => "notice"
        "I" => "info"
        "W" => "warn"
        "E" => "error"
        "C" => "critical"
        "F" => "fatal"
        "S" => "severe"
      }
    }
  }
  if [type] == "app" {
    translate {
      field => "[meta][component]"
      destination => "[meta][component]"
      override => true
      dictionary => {
        "ansys-controller" => "controller"
        "ansys-commond" => "commond"
        "ansys-storage" => "storage"
        "ansys-facade" => "facade"
      }
    }
    json_encode {
      source => "data"
    }
    mutate {
      convert => {
        level => "string"
        label => "string"
      }
    }
  }
  mutate {
    convert => {
      level => "string"
      label => "string"
    }
  }
  translate {
    field => "level"
    destination => "level"
    override => true
    dictionary => {
      "alert" => "warn"
      "notice" => "info"
      "warning" => "warn"
      "err" => "error"
      "critical" => "fatal"
      "severe" => "fatal"
      "emerg" => "fatal"
      "emergency" => "fatal"
    }
  }
}

output {
  if [level] not in ["trace", "debug", "info"] {
    stdout { }
  }
  elasticsearch {
    hosts => ["elasticsearch:9200"]
  }
}
